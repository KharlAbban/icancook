/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Recipe = {
  _id: string;
  _type: "recipe";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  recipeImages?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  recipeType?: string;
  ingredients?: Array<{
    ingredientReference?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "ingredient";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "recipe";
    };
    amount?: string;
    _key: string;
  }>;
  description?: string;
  cookTime?: string;
  isFavorite?: boolean;
  steps?: Array<string>;
};

export type Ingredient = {
  _id: string;
  _type: "ingredient";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  ingredientImages?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  description?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Recipe | Ingredient | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | MediaTag | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: SANITY_FETCH_ALL_RECIPES_QUERY
// Query: *[_type == "recipe"] | order(_updatedAt desc) {        ...    }
export type SANITY_FETCH_ALL_RECIPES_QUERYResult = Array<{
  _id: string;
  _type: "recipe";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  recipeImages?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  recipeType?: string;
  ingredients?: Array<{
    ingredientReference?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "ingredient";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "recipe";
    };
    amount?: string;
    _key: string;
  }>;
  description?: string;
  cookTime?: string;
  isFavorite?: boolean;
  steps?: Array<string>;
}>;
// Variable: SANITY_GET_RECIPE_BY_NAME_QUERY
// Query: *[_type == "recipe" && name match ("*" + $recipeName + "*")][0] {        ...    }
export type SANITY_GET_RECIPE_BY_NAME_QUERYResult = {
  _id: string;
  _type: "recipe";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  recipeImages?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  recipeType?: string;
  ingredients?: Array<{
    ingredientReference?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "ingredient";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "recipe";
    };
    amount?: string;
    _key: string;
  }>;
  description?: string;
  cookTime?: string;
  isFavorite?: boolean;
  steps?: Array<string>;
} | null;
// Variable: SANITY_GET_RECIPE_BY_ID_QUERY
// Query: *[_type == "recipe" && _id == $recipeId][0] {        ...,        ingredients[] {            amount,            ingredientReference -> {                name,                "image": select(                    _type == "ingredient" => ingredientImages[0],                    _type == "recipe" => recipeImages[0],                )            }        }    }
export type SANITY_GET_RECIPE_BY_ID_QUERYResult = {
  _id: string;
  _type: "recipe";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  recipeImages?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  recipeType?: string;
  ingredients: Array<{
    amount: string | null;
    ingredientReference: {
      name: string | null;
      image: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      } | null;
    } | null;
  }> | null;
  description?: string;
  cookTime?: string;
  isFavorite?: boolean;
  steps?: Array<string>;
} | null;
// Variable: SANITY_FETCH_ALL_INGREDIENTS_QUERY
// Query: *[_type == "ingredient"] | order(_updatedAt desc) {        ...    }
export type SANITY_FETCH_ALL_INGREDIENTS_QUERYResult = Array<{
  _id: string;
  _type: "ingredient";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  ingredientImages?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  description?: string;
}>;
// Variable: SANITY_GET_INGREDIENT_BY_NAME_QUERY
// Query: *[_type == "ingredient" && name match ("*" + $ingredientName + "*")][0] {        ...    }
export type SANITY_GET_INGREDIENT_BY_NAME_QUERYResult = {
  _id: string;
  _type: "ingredient";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  ingredientImages?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  description?: string;
} | null;
// Variable: SANITY_GET_INGREDIENT_BY_ID_QUERY
// Query: *[_type == "ingredient" && _id == $ingredientId][0] {        ...    }
export type SANITY_GET_INGREDIENT_BY_ID_QUERYResult = {
  _id: string;
  _type: "ingredient";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  ingredientImages?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  description?: string;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    *[_type == \"recipe\"] | order(_updatedAt desc) {\n        ...\n    }\n": SANITY_FETCH_ALL_RECIPES_QUERYResult;
    "\n    *[_type == \"recipe\" && name match (\"*\" + $recipeName + \"*\")][0] {\n        ...\n    }\n": SANITY_GET_RECIPE_BY_NAME_QUERYResult;
    "\n    *[_type == \"recipe\" && _id == $recipeId][0] {\n        ...,\n        ingredients[] {\n            amount,\n            ingredientReference -> {\n                name,\n                \"image\": select(\n                    _type == \"ingredient\" => ingredientImages[0],\n                    _type == \"recipe\" => recipeImages[0],\n                )\n            }\n        }\n    }\n": SANITY_GET_RECIPE_BY_ID_QUERYResult;
    "\n    *[_type == \"ingredient\"] | order(_updatedAt desc) {\n        ...\n    }\n": SANITY_FETCH_ALL_INGREDIENTS_QUERYResult;
    "\n    *[_type == \"ingredient\" && name match (\"*\" + $ingredientName + \"*\")][0] {\n        ...\n    }\n": SANITY_GET_INGREDIENT_BY_NAME_QUERYResult;
    "\n    *[_type == \"ingredient\" && _id == $ingredientId][0] {\n        ...\n    }\n": SANITY_GET_INGREDIENT_BY_ID_QUERYResult;
  }
}
